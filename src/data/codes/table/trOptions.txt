import { useEffect, useState } from "react";
import { Gridsify } from "gridsify";

function index() {
  const addedMap = [
    ["id", "id"],
    ["albumId", "앨범 ID"],
    ["title", "제목"],
    ["thumbnailUrl", "썸네일"],
    ["url", "-"],
  ];

  // see data structure
  // [
  //   {
  //     "id": 1,
  //     "albumId": "1",
  //     "thumbnailUrl": "https://via.placeholder.com/150/92c952",
  //     "url":"https://via.placeholder.com/600/92c952",
  //     "title": "accusamus beatae ad facilis cum similique qui sunt"
  //   }, ...
  // ]

  const [data, setData] = useState<{}[]>([]);

  const [perPage, setPerPage] = useState({
    page: 1,
    perPage: 100,
    pageLength: 1,
  });

  const getData = async () => {
    await fetch(
      `https://jsonplaceholder.typicode.com/photos?_page=${perPage.page}&_limit=${perPage.perPage}`
    ).then(async (res) => {
      const result = await res.json();
      setData(result);
      setPerPage((prev) => {
        return { ...prev, pageLength: 5000 / perPage.perPage };
      });
    });
  };

  useEffect(() => {
    getData();
  }, [perPage.page, perPage.perPage]);

  const [imgae, setImage] = useState("");

  const [headDraggable, setHeadDraggable] = useState(false);
  const [bodyDraggable, setBodyDraggable] = useState(false);

  return (
    <Gridsify
      data={data || []}
      addedMap={addedMap}
      perPageOptions={{
        page: perPage.page,
        perPage: perPage.perPage,
        pageLength: perPage.pageLength,
        setPerPage: setPerPage,
      }}
      perPageList={[100, 250, 500]}
      tdOptions={{
        thumbnailUrl: {
          el: (item: string) => {
            return <img className="flex flex-col gap-2" src={item} />;
          },
        },
        url: {
          el: (url: string) => {
            return (
              <button
                className="btn btn-primary btn-sm"
                onClick={() => {
                  (
                    document.getElementById("my_modal_1") as HTMLFormElement
                  ).showModal?.();
                  setImage(url);
                }}
              >
                확대해서 보기
              </button>
            );
          },
        },
      }}
      trOptions={{
        thead: {
          isDraggable: () => headDraggable,
        },
        tbody: {
          isDraggable: () => bodyDraggable,
          dragEndFunc: (item: TdObjTypes[]) => {
            console.log(item);
          },
          dbClickFunc: (item: TdObjTypes) => {
            alert(JSON.stringify(item));
          },
        },
      }}
    />
  );
}

export default index;
